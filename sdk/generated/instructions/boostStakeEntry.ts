/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  BoostStakeEntryIx,
  boostStakeEntryIxBeet,
} from '../types/BoostStakeEntryIx'

/**
 * @category Instructions
 * @category BoostStakeEntry
 * @category generated
 */
export type BoostStakeEntryInstructionArgs = {
  ix: BoostStakeEntryIx
}
/**
 * @category Instructions
 * @category BoostStakeEntry
 * @category generated
 */
export const boostStakeEntryStruct = new beet.BeetArgsStruct<
  BoostStakeEntryInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['ix', boostStakeEntryIxBeet],
  ],
  'BoostStakeEntryInstructionArgs'
)
/**
 * Accounts required by the _boostStakeEntry_ instruction
 *
 * @property [_writable_] stakeBooster
 * @property [_writable_] stakePool
 * @property [_writable_] stakeEntry
 * @property [] stakeMint
 * @property [_writable_] payerTokenAccount
 * @property [_writable_] paymentRecipientTokenAccount
 * @property [_writable_, **signer**] payer
 * @property [_writable_] paymentManager
 * @property [_writable_] feeCollectorTokenAccount
 * @property [] cardinalPaymentManager
 * @category Instructions
 * @category BoostStakeEntry
 * @category generated
 */
export type BoostStakeEntryInstructionAccounts = {
  stakeBooster: web3.PublicKey
  stakePool: web3.PublicKey
  stakeEntry: web3.PublicKey
  stakeMint: web3.PublicKey
  payerTokenAccount: web3.PublicKey
  paymentRecipientTokenAccount: web3.PublicKey
  payer: web3.PublicKey
  paymentManager: web3.PublicKey
  feeCollectorTokenAccount: web3.PublicKey
  cardinalPaymentManager: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const boostStakeEntryInstructionDiscriminator = [
  0, 74, 151, 187, 119, 53, 170, 181,
]

/**
 * Creates a _BoostStakeEntry_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category BoostStakeEntry
 * @category generated
 */
export function createBoostStakeEntryInstruction(
  accounts: BoostStakeEntryInstructionAccounts,
  args: BoostStakeEntryInstructionArgs,
  programId = new web3.PublicKey('rwcn6Ry17ChPXpJCN2hoK5kwpgFarQqzycXwVJ3om7U')
) {
  const [data] = boostStakeEntryStruct.serialize({
    instructionDiscriminator: boostStakeEntryInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.stakeBooster,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeEntry,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payerTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.paymentRecipientTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.paymentManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.feeCollectorTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.cardinalPaymentManager,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
