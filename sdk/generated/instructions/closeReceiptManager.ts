/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CloseReceiptManager
 * @category generated
 */
export const closeReceiptManagerStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CloseReceiptManagerInstructionArgs'
)
/**
 * Accounts required by the _closeReceiptManager_ instruction
 *
 * @property [_writable_] receiptManager
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category CloseReceiptManager
 * @category generated
 */
export type CloseReceiptManagerInstructionAccounts = {
  receiptManager: web3.PublicKey
  authority: web3.PublicKey
}

export const closeReceiptManagerInstructionDiscriminator = [
  197, 111, 141, 82, 48, 138, 70, 79,
]

/**
 * Creates a _CloseReceiptManager_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CloseReceiptManager
 * @category generated
 */
export function createCloseReceiptManagerInstruction(
  accounts: CloseReceiptManagerInstructionAccounts,
  programId = new web3.PublicKey('rwcn6Ry17ChPXpJCN2hoK5kwpgFarQqzycXwVJ3om7U')
) {
  const [data] = closeReceiptManagerStruct.serialize({
    instructionDiscriminator: closeReceiptManagerInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.receiptManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
