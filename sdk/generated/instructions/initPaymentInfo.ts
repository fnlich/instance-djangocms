/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  InitPaymentInfoIx,
  initPaymentInfoIxBeet,
} from '../types/InitPaymentInfoIx'

/**
 * @category Instructions
 * @category InitPaymentInfo
 * @category generated
 */
export type InitPaymentInfoInstructionArgs = {
  ix: InitPaymentInfoIx
}
/**
 * @category Instructions
 * @category InitPaymentInfo
 * @category generated
 */
export const initPaymentInfoStruct = new beet.FixableBeetArgsStruct<
  InitPaymentInfoInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['ix', initPaymentInfoIxBeet],
  ],
  'InitPaymentInfoInstructionArgs'
)
/**
 * Accounts required by the _initPaymentInfo_ instruction
 *
 * @property [_writable_] paymentInfo
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category InitPaymentInfo
 * @category generated
 */
export type InitPaymentInfoInstructionAccounts = {
  paymentInfo: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const initPaymentInfoInstructionDiscriminator = [
  80, 104, 129, 74, 241, 76, 178, 21,
]

/**
 * Creates a _InitPaymentInfo_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitPaymentInfo
 * @category generated
 */
export function createInitPaymentInfoInstruction(
  accounts: InitPaymentInfoInstructionAccounts,
  args: InitPaymentInfoInstructionArgs,
  programId = new web3.PublicKey('rwcn6Ry17ChPXpJCN2hoK5kwpgFarQqzycXwVJ3om7U')
) {
  const [data] = initPaymentInfoStruct.serialize({
    instructionDiscriminator: initPaymentInfoInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.paymentInfo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
