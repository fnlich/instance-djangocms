/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as splToken from "@solana/spl-token";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category ReclaimFunds
 * @category generated
 */
export type ReclaimFundsInstructionArgs = {
  amount: beet.bignum;
};
/**
 * @category Instructions
 * @category ReclaimFunds
 * @category generated
 */
export const reclaimFundsStruct = new beet.BeetArgsStruct<
  ReclaimFundsInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["amount", beet.u64],
  ],
  "ReclaimFundsInstructionArgs"
);
/**
 * Accounts required by the _reclaimFunds_ instruction
 *
 * @property [_writable_] rewardDistributor
 * @property [_writable_] rewardDistributorTokenAccount
 * @property [_writable_] authorityTokenAccount
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category ReclaimFunds
 * @category generated
 */
export type ReclaimFundsInstructionAccounts = {
  rewardDistributor: web3.PublicKey;
  rewardDistributorTokenAccount: web3.PublicKey;
  authorityTokenAccount: web3.PublicKey;
  authority: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
};

export const reclaimFundsInstructionDiscriminator = [
  38, 246, 147, 248, 43, 41, 43, 198,
];

/**
 * Creates a _ReclaimFunds_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ReclaimFunds
 * @category generated
 */
export function createReclaimFundsInstruction(
  accounts: ReclaimFundsInstructionAccounts,
  args: ReclaimFundsInstructionArgs,
  programId = new web3.PublicKey("rwd2rAm24YWUrtK6VmaNgadvhxcX5N1LVnSauUQZbuA")
) {
  const [data] = reclaimFundsStruct.serialize({
    instructionDiscriminator: reclaimFundsInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.rewardDistributor,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardDistributorTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authorityTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
