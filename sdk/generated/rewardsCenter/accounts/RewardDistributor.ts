/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link RewardDistributor}
 * @category Accounts
 * @category generated
 */
export type RewardDistributorArgs = {
  bump: number
  stakePool: web3.PublicKey
  kind: number
  authority: web3.PublicKey
  rewardMint: web3.PublicKey
  rewardAmount: beet.bignum
  rewardDurationSeconds: beet.bignum
  rewardsIssued: beet.bignum
  maxSupply: beet.COption<beet.bignum>
  defaultMultiplier: beet.bignum
  multiplierDecimals: number
  maxRewardSecondsReceived: beet.COption<beet.bignum>
}

export const rewardDistributorDiscriminator = [
  215, 10, 217, 199, 104, 194, 97, 227,
]
/**
 * Holds the data for the {@link RewardDistributor} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class RewardDistributor implements RewardDistributorArgs {
  private constructor(
    readonly bump: number,
    readonly stakePool: web3.PublicKey,
    readonly kind: number,
    readonly authority: web3.PublicKey,
    readonly rewardMint: web3.PublicKey,
    readonly rewardAmount: beet.bignum,
    readonly rewardDurationSeconds: beet.bignum,
    readonly rewardsIssued: beet.bignum,
    readonly maxSupply: beet.COption<beet.bignum>,
    readonly defaultMultiplier: beet.bignum,
    readonly multiplierDecimals: number,
    readonly maxRewardSecondsReceived: beet.COption<beet.bignum>
  ) {}

  /**
   * Creates a {@link RewardDistributor} instance from the provided args.
   */
  static fromArgs(args: RewardDistributorArgs) {
    return new RewardDistributor(
      args.bump,
      args.stakePool,
      args.kind,
      args.authority,
      args.rewardMint,
      args.rewardAmount,
      args.rewardDurationSeconds,
      args.rewardsIssued,
      args.maxSupply,
      args.defaultMultiplier,
      args.multiplierDecimals,
      args.maxRewardSecondsReceived
    )
  }

  /**
   * Deserializes the {@link RewardDistributor} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [RewardDistributor, number] {
    return RewardDistributor.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link RewardDistributor} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<RewardDistributor> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find RewardDistributor account at ${address}`)
    }
    return RewardDistributor.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'rwcg7ZBhxV8ViZvueh5kRuQXkTGD8TmcoPmEpDutCUJ'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, rewardDistributorBeet)
  }

  /**
   * Deserializes the {@link RewardDistributor} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [RewardDistributor, number] {
    return rewardDistributorBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link RewardDistributor} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return rewardDistributorBeet.serialize({
      accountDiscriminator: rewardDistributorDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link RewardDistributor} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: RewardDistributorArgs) {
    const instance = RewardDistributor.fromArgs(args)
    return rewardDistributorBeet.toFixedFromValue({
      accountDiscriminator: rewardDistributorDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link RewardDistributor} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: RewardDistributorArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      RewardDistributor.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link RewardDistributor} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      stakePool: this.stakePool.toBase58(),
      kind: this.kind,
      authority: this.authority.toBase58(),
      rewardMint: this.rewardMint.toBase58(),
      rewardAmount: (() => {
        const x = <{ toNumber: () => number }>this.rewardAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      rewardDurationSeconds: (() => {
        const x = <{ toNumber: () => number }>this.rewardDurationSeconds
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      rewardsIssued: (() => {
        const x = <{ toNumber: () => number }>this.rewardsIssued
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      maxSupply: this.maxSupply,
      defaultMultiplier: (() => {
        const x = <{ toNumber: () => number }>this.defaultMultiplier
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      multiplierDecimals: this.multiplierDecimals,
      maxRewardSecondsReceived: this.maxRewardSecondsReceived,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const rewardDistributorBeet = new beet.FixableBeetStruct<
  RewardDistributor,
  RewardDistributorArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['stakePool', beetSolana.publicKey],
    ['kind', beet.u8],
    ['authority', beetSolana.publicKey],
    ['rewardMint', beetSolana.publicKey],
    ['rewardAmount', beet.u64],
    ['rewardDurationSeconds', beet.u128],
    ['rewardsIssued', beet.u128],
    ['maxSupply', beet.coption(beet.u64)],
    ['defaultMultiplier', beet.u64],
    ['multiplierDecimals', beet.u8],
    ['maxRewardSecondsReceived', beet.coption(beet.u128)],
  ],
  RewardDistributor.fromArgs,
  'RewardDistributor'
)
