/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import * as web3 from "@solana/web3.js";

/**
 * Arguments used to create {@link StakeBooster}
 * @category Accounts
 * @category generated
 */
export type StakeBoosterArgs = {
  bump: number;
  stakePool: web3.PublicKey;
  identifier: beet.bignum;
  paymentAmount: beet.bignum;
  paymentMint: web3.PublicKey;
  paymentManager: web3.PublicKey;
  paymentRecipient: web3.PublicKey;
  boostSeconds: beet.bignum;
  startTimeSeconds: beet.bignum;
};

export const stakeBoosterDiscriminator = [133, 242, 13, 224, 46, 151, 169, 50];
/**
 * Holds the data for the {@link StakeBooster} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class StakeBooster implements StakeBoosterArgs {
  private constructor(
    readonly bump: number,
    readonly stakePool: web3.PublicKey,
    readonly identifier: beet.bignum,
    readonly paymentAmount: beet.bignum,
    readonly paymentMint: web3.PublicKey,
    readonly paymentManager: web3.PublicKey,
    readonly paymentRecipient: web3.PublicKey,
    readonly boostSeconds: beet.bignum,
    readonly startTimeSeconds: beet.bignum
  ) {}

  /**
   * Creates a {@link StakeBooster} instance from the provided args.
   */
  static fromArgs(args: StakeBoosterArgs) {
    return new StakeBooster(
      args.bump,
      args.stakePool,
      args.identifier,
      args.paymentAmount,
      args.paymentMint,
      args.paymentManager,
      args.paymentRecipient,
      args.boostSeconds,
      args.startTimeSeconds
    );
  }

  /**
   * Deserializes the {@link StakeBooster} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [StakeBooster, number] {
    return StakeBooster.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link StakeBooster} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<StakeBooster> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find StakeBooster account at ${address}`);
    }
    return StakeBooster.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "stk2688WVNGaHZGiLuuyGdQQWDdt8n69gEEo5eWYFt6"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, stakeBoosterBeet);
  }

  /**
   * Deserializes the {@link StakeBooster} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [StakeBooster, number] {
    return stakeBoosterBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link StakeBooster} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return stakeBoosterBeet.serialize({
      accountDiscriminator: stakeBoosterDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link StakeBooster}
   */
  static get byteSize() {
    return stakeBoosterBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link StakeBooster} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      StakeBooster.byteSize,
      commitment
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link StakeBooster} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === StakeBooster.byteSize;
  }

  /**
   * Returns a readable version of {@link StakeBooster} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      stakePool: this.stakePool.toBase58(),
      identifier: (() => {
        const x = <{ toNumber: () => number }>this.identifier;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      paymentAmount: (() => {
        const x = <{ toNumber: () => number }>this.paymentAmount;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      paymentMint: this.paymentMint.toBase58(),
      paymentManager: this.paymentManager.toBase58(),
      paymentRecipient: this.paymentRecipient.toBase58(),
      boostSeconds: (() => {
        const x = <{ toNumber: () => number }>this.boostSeconds;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      startTimeSeconds: (() => {
        const x = <{ toNumber: () => number }>this.startTimeSeconds;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const stakeBoosterBeet = new beet.BeetStruct<
  StakeBooster,
  StakeBoosterArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["bump", beet.u8],
    ["stakePool", beetSolana.publicKey],
    ["identifier", beet.u64],
    ["paymentAmount", beet.u64],
    ["paymentMint", beetSolana.publicKey],
    ["paymentManager", beetSolana.publicKey],
    ["paymentRecipient", beetSolana.publicKey],
    ["boostSeconds", beet.u128],
    ["startTimeSeconds", beet.i64],
  ],
  StakeBooster.fromArgs,
  "StakeBooster"
);
