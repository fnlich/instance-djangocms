/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import * as web3 from "@solana/web3.js";

/**
 * Arguments used to create {@link StakePool}
 * @category Accounts
 * @category generated
 */
export type StakePoolArgs = {
  bump: number;
  identifier: beet.bignum;
  authority: web3.PublicKey;
  requiresCreators: web3.PublicKey[];
  requiresCollections: web3.PublicKey[];
  requiresAuthorization: boolean;
  overlayText: string;
  imageUri: string;
  resetOnStake: boolean;
  totalStaked: number;
  cooldownSeconds: beet.COption<number>;
  minStakeSeconds: beet.COption<number>;
  endDate: beet.COption<beet.bignum>;
  paymentAmount: beet.COption<beet.bignum>;
  paymentMint: beet.COption<web3.PublicKey>;
  paymentManager: beet.COption<web3.PublicKey>;
};

export const stakePoolDiscriminator = [121, 34, 206, 21, 79, 127, 255, 28];
/**
 * Holds the data for the {@link StakePool} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class StakePool implements StakePoolArgs {
  private constructor(
    readonly bump: number,
    readonly identifier: beet.bignum,
    readonly authority: web3.PublicKey,
    readonly requiresCreators: web3.PublicKey[],
    readonly requiresCollections: web3.PublicKey[],
    readonly requiresAuthorization: boolean,
    readonly overlayText: string,
    readonly imageUri: string,
    readonly resetOnStake: boolean,
    readonly totalStaked: number,
    readonly cooldownSeconds: beet.COption<number>,
    readonly minStakeSeconds: beet.COption<number>,
    readonly endDate: beet.COption<beet.bignum>,
    readonly paymentAmount: beet.COption<beet.bignum>,
    readonly paymentMint: beet.COption<web3.PublicKey>,
    readonly paymentManager: beet.COption<web3.PublicKey>
  ) {}

  /**
   * Creates a {@link StakePool} instance from the provided args.
   */
  static fromArgs(args: StakePoolArgs) {
    return new StakePool(
      args.bump,
      args.identifier,
      args.authority,
      args.requiresCreators,
      args.requiresCollections,
      args.requiresAuthorization,
      args.overlayText,
      args.imageUri,
      args.resetOnStake,
      args.totalStaked,
      args.cooldownSeconds,
      args.minStakeSeconds,
      args.endDate,
      args.paymentAmount,
      args.paymentMint,
      args.paymentManager
    );
  }

  /**
   * Deserializes the {@link StakePool} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [StakePool, number] {
    return StakePool.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link StakePool} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<StakePool> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find StakePool account at ${address}`);
    }
    return StakePool.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "stk2688WVNGaHZGiLuuyGdQQWDdt8n69gEEo5eWYFt6"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, stakePoolBeet);
  }

  /**
   * Deserializes the {@link StakePool} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [StakePool, number] {
    return stakePoolBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link StakePool} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return stakePoolBeet.serialize({
      accountDiscriminator: stakePoolDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link StakePool} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: StakePoolArgs) {
    const instance = StakePool.fromArgs(args);
    return stakePoolBeet.toFixedFromValue({
      accountDiscriminator: stakePoolDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link StakePool} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: StakePoolArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      StakePool.byteSize(args),
      commitment
    );
  }

  /**
   * Returns a readable version of {@link StakePool} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      identifier: (() => {
        const x = <{ toNumber: () => number }>this.identifier;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      authority: this.authority.toBase58(),
      requiresCreators: this.requiresCreators,
      requiresCollections: this.requiresCollections,
      requiresAuthorization: this.requiresAuthorization,
      overlayText: this.overlayText,
      imageUri: this.imageUri,
      resetOnStake: this.resetOnStake,
      totalStaked: this.totalStaked,
      cooldownSeconds: this.cooldownSeconds,
      minStakeSeconds: this.minStakeSeconds,
      endDate: this.endDate,
      paymentAmount: this.paymentAmount,
      paymentMint: this.paymentMint,
      paymentManager: this.paymentManager,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const stakePoolBeet = new beet.FixableBeetStruct<
  StakePool,
  StakePoolArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["bump", beet.u8],
    ["identifier", beet.u64],
    ["authority", beetSolana.publicKey],
    ["requiresCreators", beet.array(beetSolana.publicKey)],
    ["requiresCollections", beet.array(beetSolana.publicKey)],
    ["requiresAuthorization", beet.bool],
    ["overlayText", beet.utf8String],
    ["imageUri", beet.utf8String],
    ["resetOnStake", beet.bool],
    ["totalStaked", beet.u32],
    ["cooldownSeconds", beet.coption(beet.u32)],
    ["minStakeSeconds", beet.coption(beet.u32)],
    ["endDate", beet.coption(beet.i64)],
    ["paymentAmount", beet.coption(beet.u64)],
    ["paymentMint", beet.coption(beetSolana.publicKey)],
    ["paymentManager", beet.coption(beetSolana.publicKey)],
  ],
  StakePool.fromArgs,
  "StakePool"
);
