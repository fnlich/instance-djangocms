/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidStakePool: 'Invalid stake pool'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakePoolError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidStakePool'
  constructor() {
    super('Invalid stake pool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakePoolError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidStakePoolError())
createErrorFromNameLookup.set(
  'InvalidStakePool',
  () => new InvalidStakePoolError()
)

/**
 * InvalidStakeEntry: 'Invalid stake entry'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeEntryError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidStakeEntry'
  constructor() {
    super('Invalid stake entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeEntryError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidStakeEntryError())
createErrorFromNameLookup.set(
  'InvalidStakeEntry',
  () => new InvalidStakeEntryError()
)

/**
 * InvalidAuthority: 'Invalid stake pool authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidAuthority'
  constructor() {
    super('Invalid stake pool authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidAuthorityError())
createErrorFromNameLookup.set(
  'InvalidAuthority',
  () => new InvalidAuthorityError()
)

/**
 * InvalidEscrow: 'Mismatched user and escrow'
 *
 * @category Errors
 * @category generated
 */
export class InvalidEscrowError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidEscrow'
  constructor() {
    super('Mismatched user and escrow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidEscrowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidEscrowError())
createErrorFromNameLookup.set('InvalidEscrow', () => new InvalidEscrowError())

/**
 * InvalidUserStakeMintTokenAccount: 'Invalid user original mint token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUserStakeMintTokenAccountError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidUserStakeMintTokenAccount'
  constructor() {
    super('Invalid user original mint token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUserStakeMintTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177a,
  () => new InvalidUserStakeMintTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidUserStakeMintTokenAccount',
  () => new InvalidUserStakeMintTokenAccountError()
)

/**
 * InvalidLastStaker: 'Invalid last staker'
 *
 * @category Errors
 * @category generated
 */
export class InvalidLastStakerError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'InvalidLastStaker'
  constructor() {
    super('Invalid last staker')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidLastStakerError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new InvalidLastStakerError())
createErrorFromNameLookup.set(
  'InvalidLastStaker',
  () => new InvalidLastStakerError()
)

/**
 * CannotUpdateUnstakedEntry: 'Cannot update unstaked entry'
 *
 * @category Errors
 * @category generated
 */
export class CannotUpdateUnstakedEntryError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'CannotUpdateUnstakedEntry'
  constructor() {
    super('Cannot update unstaked entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotUpdateUnstakedEntryError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177c,
  () => new CannotUpdateUnstakedEntryError()
)
createErrorFromNameLookup.set(
  'CannotUpdateUnstakedEntry',
  () => new CannotUpdateUnstakedEntryError()
)

/**
 * CannotCloseStakedEntry: 'Cannot close staked entry'
 *
 * @category Errors
 * @category generated
 */
export class CannotCloseStakedEntryError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'CannotCloseStakedEntry'
  constructor() {
    super('Cannot close staked entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotCloseStakedEntryError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new CannotCloseStakedEntryError())
createErrorFromNameLookup.set(
  'CannotCloseStakedEntry',
  () => new CannotCloseStakedEntryError()
)

/**
 * CannotClosePoolWithStakedEntries: 'Cannot close staked entry'
 *
 * @category Errors
 * @category generated
 */
export class CannotClosePoolWithStakedEntriesError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'CannotClosePoolWithStakedEntries'
  constructor() {
    super('Cannot close staked entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotClosePoolWithStakedEntriesError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177e,
  () => new CannotClosePoolWithStakedEntriesError()
)
createErrorFromNameLookup.set(
  'CannotClosePoolWithStakedEntries',
  () => new CannotClosePoolWithStakedEntriesError()
)

/**
 * InvalidMintMetadata: 'Invalid mint metadata'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintMetadataError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'InvalidMintMetadata'
  constructor() {
    super('Invalid mint metadata')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintMetadataError)
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new InvalidMintMetadataError())
createErrorFromNameLookup.set(
  'InvalidMintMetadata',
  () => new InvalidMintMetadataError()
)

/**
 * MintNotAllowedInPool: 'Mint not allowed in this pool'
 *
 * @category Errors
 * @category generated
 */
export class MintNotAllowedInPoolError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'MintNotAllowedInPool'
  constructor() {
    super('Mint not allowed in this pool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintNotAllowedInPoolError)
    }
  }
}

createErrorFromCodeLookup.set(0x1785, () => new MintNotAllowedInPoolError())
createErrorFromNameLookup.set(
  'MintNotAllowedInPool',
  () => new MintNotAllowedInPoolError()
)

/**
 * InvalidStakeAuthorizationRecord: 'Invalid stake authorization provided'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeAuthorizationRecordError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'InvalidStakeAuthorizationRecord'
  constructor() {
    super('Invalid stake authorization provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeAuthorizationRecordError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1786,
  () => new InvalidStakeAuthorizationRecordError()
)
createErrorFromNameLookup.set(
  'InvalidStakeAuthorizationRecord',
  () => new InvalidStakeAuthorizationRecordError()
)

/**
 * InvalidMintMetadataOwner: 'Mint metadata is owned by the incorrect program'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintMetadataOwnerError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'InvalidMintMetadataOwner'
  constructor() {
    super('Mint metadata is owned by the incorrect program')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintMetadataOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1787, () => new InvalidMintMetadataOwnerError())
createErrorFromNameLookup.set(
  'InvalidMintMetadataOwner',
  () => new InvalidMintMetadataOwnerError()
)

/**
 * InvalidPaymentMint: 'Invalid payment mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPaymentMintError extends Error {
  readonly code: number = 0x178e
  readonly name: string = 'InvalidPaymentMint'
  constructor() {
    super('Invalid payment mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPaymentMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x178e, () => new InvalidPaymentMintError())
createErrorFromNameLookup.set(
  'InvalidPaymentMint',
  () => new InvalidPaymentMintError()
)

/**
 * CooldownSecondRemaining: 'Token still has some cooldown seconds remaining'
 *
 * @category Errors
 * @category generated
 */
export class CooldownSecondRemainingError extends Error {
  readonly code: number = 0x1798
  readonly name: string = 'CooldownSecondRemaining'
  constructor() {
    super('Token still has some cooldown seconds remaining')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CooldownSecondRemainingError)
    }
  }
}

createErrorFromCodeLookup.set(0x1798, () => new CooldownSecondRemainingError())
createErrorFromNameLookup.set(
  'CooldownSecondRemaining',
  () => new CooldownSecondRemainingError()
)

/**
 * StakePoolHasEnded: 'Stake pool has ended'
 *
 * @category Errors
 * @category generated
 */
export class StakePoolHasEndedError extends Error {
  readonly code: number = 0x17a2
  readonly name: string = 'StakePoolHasEnded'
  constructor() {
    super('Stake pool has ended')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakePoolHasEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a2, () => new StakePoolHasEndedError())
createErrorFromNameLookup.set(
  'StakePoolHasEnded',
  () => new StakePoolHasEndedError()
)

/**
 * MinStakeSecondsNotSatisfied: 'Minimum stake seconds not satisfied'
 *
 * @category Errors
 * @category generated
 */
export class MinStakeSecondsNotSatisfiedError extends Error {
  readonly code: number = 0x17a3
  readonly name: string = 'MinStakeSecondsNotSatisfied'
  constructor() {
    super('Minimum stake seconds not satisfied')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MinStakeSecondsNotSatisfiedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a3,
  () => new MinStakeSecondsNotSatisfiedError()
)
createErrorFromNameLookup.set(
  'MinStakeSecondsNotSatisfied',
  () => new MinStakeSecondsNotSatisfiedError()
)

/**
 * CannotBoostUnstakedToken: 'Cannot boost unstaked token'
 *
 * @category Errors
 * @category generated
 */
export class CannotBoostUnstakedTokenError extends Error {
  readonly code: number = 0x17ac
  readonly name: string = 'CannotBoostUnstakedToken'
  constructor() {
    super('Cannot boost unstaked token')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotBoostUnstakedTokenError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ac, () => new CannotBoostUnstakedTokenError())
createErrorFromNameLookup.set(
  'CannotBoostUnstakedToken',
  () => new CannotBoostUnstakedTokenError()
)

/**
 * CannotBoostMoreThanCurrentTime: 'Cannot boost past current time less than start time'
 *
 * @category Errors
 * @category generated
 */
export class CannotBoostMoreThanCurrentTimeError extends Error {
  readonly code: number = 0x17ad
  readonly name: string = 'CannotBoostMoreThanCurrentTime'
  constructor() {
    super('Cannot boost past current time less than start time')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotBoostMoreThanCurrentTimeError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ad,
  () => new CannotBoostMoreThanCurrentTimeError()
)
createErrorFromNameLookup.set(
  'CannotBoostMoreThanCurrentTime',
  () => new CannotBoostMoreThanCurrentTimeError()
)

/**
 * InvalidBoostPayerTokenAccount: 'Invalid boost payer token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBoostPayerTokenAccountError extends Error {
  readonly code: number = 0x17ae
  readonly name: string = 'InvalidBoostPayerTokenAccount'
  constructor() {
    super('Invalid boost payer token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidBoostPayerTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ae,
  () => new InvalidBoostPayerTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidBoostPayerTokenAccount',
  () => new InvalidBoostPayerTokenAccountError()
)

/**
 * InvalidBoostPaymentRecipientTokenAccount: 'Invalid boost payment recipient token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBoostPaymentRecipientTokenAccountError extends Error {
  readonly code: number = 0x17af
  readonly name: string = 'InvalidBoostPaymentRecipientTokenAccount'
  constructor() {
    super('Invalid boost payment recipient token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InvalidBoostPaymentRecipientTokenAccountError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17af,
  () => new InvalidBoostPaymentRecipientTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidBoostPaymentRecipientTokenAccount',
  () => new InvalidBoostPaymentRecipientTokenAccountError()
)

/**
 * InvalidPaymentManager: 'Invalid payment manager'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPaymentManagerError extends Error {
  readonly code: number = 0x17b0
  readonly name: string = 'InvalidPaymentManager'
  constructor() {
    super('Invalid payment manager')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPaymentManagerError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b0, () => new InvalidPaymentManagerError())
createErrorFromNameLookup.set(
  'InvalidPaymentManager',
  () => new InvalidPaymentManagerError()
)

/**
 * CannotBoostFungibleToken: 'Cannot boost a fungible token stake entry'
 *
 * @category Errors
 * @category generated
 */
export class CannotBoostFungibleTokenError extends Error {
  readonly code: number = 0x17b1
  readonly name: string = 'CannotBoostFungibleToken'
  constructor() {
    super('Cannot boost a fungible token stake entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotBoostFungibleTokenError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b1, () => new CannotBoostFungibleTokenError())
createErrorFromNameLookup.set(
  'CannotBoostFungibleToken',
  () => new CannotBoostFungibleTokenError()
)

/**
 * MaxNumberOfReceiptsExceeded: 'Max number of receipts exceeded'
 *
 * @category Errors
 * @category generated
 */
export class MaxNumberOfReceiptsExceededError extends Error {
  readonly code: number = 0x17b6
  readonly name: string = 'MaxNumberOfReceiptsExceeded'
  constructor() {
    super('Max number of receipts exceeded')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxNumberOfReceiptsExceededError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b6,
  () => new MaxNumberOfReceiptsExceededError()
)
createErrorFromNameLookup.set(
  'MaxNumberOfReceiptsExceeded',
  () => new MaxNumberOfReceiptsExceededError()
)

/**
 * InvalidClaimer: 'Invalid claimer'
 *
 * @category Errors
 * @category generated
 */
export class InvalidClaimerError extends Error {
  readonly code: number = 0x17b7
  readonly name: string = 'InvalidClaimer'
  constructor() {
    super('Invalid claimer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidClaimerError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b7, () => new InvalidClaimerError())
createErrorFromNameLookup.set('InvalidClaimer', () => new InvalidClaimerError())

/**
 * RewardSecondsNotSatisfied: 'Reward seconds not satisifed'
 *
 * @category Errors
 * @category generated
 */
export class RewardSecondsNotSatisfiedError extends Error {
  readonly code: number = 0x17b8
  readonly name: string = 'RewardSecondsNotSatisfied'
  constructor() {
    super('Reward seconds not satisifed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RewardSecondsNotSatisfiedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b8,
  () => new RewardSecondsNotSatisfiedError()
)
createErrorFromNameLookup.set(
  'RewardSecondsNotSatisfied',
  () => new RewardSecondsNotSatisfiedError()
)

/**
 * InvalidPayerTokenAcount: 'Invalid payer token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPayerTokenAcountError extends Error {
  readonly code: number = 0x17b9
  readonly name: string = 'InvalidPayerTokenAcount'
  constructor() {
    super('Invalid payer token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPayerTokenAcountError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b9, () => new InvalidPayerTokenAcountError())
createErrorFromNameLookup.set(
  'InvalidPayerTokenAcount',
  () => new InvalidPayerTokenAcountError()
)

/**
 * InvalidMaxClaimedReceipts: 'Invalid max claimed receipts'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMaxClaimedReceiptsError extends Error {
  readonly code: number = 0x17ba
  readonly name: string = 'InvalidMaxClaimedReceipts'
  constructor() {
    super('Invalid max claimed receipts')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMaxClaimedReceiptsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ba,
  () => new InvalidMaxClaimedReceiptsError()
)
createErrorFromNameLookup.set(
  'InvalidMaxClaimedReceipts',
  () => new InvalidMaxClaimedReceiptsError()
)

/**
 * InvalidPaymentTokenAccount: 'Invalid payment token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPaymentTokenAccountError extends Error {
  readonly code: number = 0x17bb
  readonly name: string = 'InvalidPaymentTokenAccount'
  constructor() {
    super('Invalid payment token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPaymentTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17bb,
  () => new InvalidPaymentTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidPaymentTokenAccount',
  () => new InvalidPaymentTokenAccountError()
)

/**
 * InvalidPaymentCollector: 'Invalid payment collector'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPaymentCollectorError extends Error {
  readonly code: number = 0x17bc
  readonly name: string = 'InvalidPaymentCollector'
  constructor() {
    super('Invalid payment collector')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPaymentCollectorError)
    }
  }
}

createErrorFromCodeLookup.set(0x17bc, () => new InvalidPaymentCollectorError())
createErrorFromNameLookup.set(
  'InvalidPaymentCollector',
  () => new InvalidPaymentCollectorError()
)

/**
 * InvalidRewardReceipt: 'Invalid reward receipt'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardReceiptError extends Error {
  readonly code: number = 0x17bd
  readonly name: string = 'InvalidRewardReceipt'
  constructor() {
    super('Invalid reward receipt')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardReceiptError)
    }
  }
}

createErrorFromCodeLookup.set(0x17bd, () => new InvalidRewardReceiptError())
createErrorFromNameLookup.set(
  'InvalidRewardReceipt',
  () => new InvalidRewardReceiptError()
)

/**
 * InvalidReceiptEntry: 'Invalid receipt entry'
 *
 * @category Errors
 * @category generated
 */
export class InvalidReceiptEntryError extends Error {
  readonly code: number = 0x17be
  readonly name: string = 'InvalidReceiptEntry'
  constructor() {
    super('Invalid receipt entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidReceiptEntryError)
    }
  }
}

createErrorFromCodeLookup.set(0x17be, () => new InvalidReceiptEntryError())
createErrorFromNameLookup.set(
  'InvalidReceiptEntry',
  () => new InvalidReceiptEntryError()
)

/**
 * InsufficientAvailableStakeSeconds: 'Insufficient available stake seconds to use'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientAvailableStakeSecondsError extends Error {
  readonly code: number = 0x17bf
  readonly name: string = 'InsufficientAvailableStakeSeconds'
  constructor() {
    super('Insufficient available stake seconds to use')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientAvailableStakeSecondsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17bf,
  () => new InsufficientAvailableStakeSecondsError()
)
createErrorFromNameLookup.set(
  'InsufficientAvailableStakeSeconds',
  () => new InsufficientAvailableStakeSecondsError()
)

/**
 * InvalidReceiptManager: 'Invalid receipt manager'
 *
 * @category Errors
 * @category generated
 */
export class InvalidReceiptManagerError extends Error {
  readonly code: number = 0x17c0
  readonly name: string = 'InvalidReceiptManager'
  constructor() {
    super('Invalid receipt manager')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidReceiptManagerError)
    }
  }
}

createErrorFromCodeLookup.set(0x17c0, () => new InvalidReceiptManagerError())
createErrorFromNameLookup.set(
  'InvalidReceiptManager',
  () => new InvalidReceiptManagerError()
)

/**
 * RewardReceiptIsNotAllowed: 'Reward receipt is not allowed'
 *
 * @category Errors
 * @category generated
 */
export class RewardReceiptIsNotAllowedError extends Error {
  readonly code: number = 0x17c1
  readonly name: string = 'RewardReceiptIsNotAllowed'
  constructor() {
    super('Reward receipt is not allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RewardReceiptIsNotAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c1,
  () => new RewardReceiptIsNotAllowedError()
)
createErrorFromNameLookup.set(
  'RewardReceiptIsNotAllowed',
  () => new RewardReceiptIsNotAllowedError()
)

/**
 * RewardReceiptAlreadyClaimed: 'Reward receipt already claimed'
 *
 * @category Errors
 * @category generated
 */
export class RewardReceiptAlreadyClaimedError extends Error {
  readonly code: number = 0x17c2
  readonly name: string = 'RewardReceiptAlreadyClaimed'
  constructor() {
    super('Reward receipt already claimed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RewardReceiptAlreadyClaimedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c2,
  () => new RewardReceiptAlreadyClaimedError()
)
createErrorFromNameLookup.set(
  'RewardReceiptAlreadyClaimed',
  () => new RewardReceiptAlreadyClaimedError()
)

/**
 * InvalidTokenAccount: 'Invalid token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenAccountError extends Error {
  readonly code: number = 0x17ca
  readonly name: string = 'InvalidTokenAccount'
  constructor() {
    super('Invalid token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ca, () => new InvalidTokenAccountError())
createErrorFromNameLookup.set(
  'InvalidTokenAccount',
  () => new InvalidTokenAccountError()
)

/**
 * InvalidRewardMint: 'Invalid reward mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardMintError extends Error {
  readonly code: number = 0x17cb
  readonly name: string = 'InvalidRewardMint'
  constructor() {
    super('Invalid reward mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x17cb, () => new InvalidRewardMintError())
createErrorFromNameLookup.set(
  'InvalidRewardMint',
  () => new InvalidRewardMintError()
)

/**
 * InvalidUserRewardMintTokenAccount: 'Invalid user reward mint token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUserRewardMintTokenAccountError extends Error {
  readonly code: number = 0x17cc
  readonly name: string = 'InvalidUserRewardMintTokenAccount'
  constructor() {
    super('Invalid user reward mint token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUserRewardMintTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17cc,
  () => new InvalidUserRewardMintTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidUserRewardMintTokenAccount',
  () => new InvalidUserRewardMintTokenAccountError()
)

/**
 * InvalidRewardDistributor: 'Invalid reward distributor'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardDistributorError extends Error {
  readonly code: number = 0x17cd
  readonly name: string = 'InvalidRewardDistributor'
  constructor() {
    super('Invalid reward distributor')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardDistributorError)
    }
  }
}

createErrorFromCodeLookup.set(0x17cd, () => new InvalidRewardDistributorError())
createErrorFromNameLookup.set(
  'InvalidRewardDistributor',
  () => new InvalidRewardDistributorError()
)

/**
 * InvalidRewardDistributorAuthority: 'Invalid reward distributor authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardDistributorAuthorityError extends Error {
  readonly code: number = 0x17ce
  readonly name: string = 'InvalidRewardDistributorAuthority'
  constructor() {
    super('Invalid reward distributor authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardDistributorAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ce,
  () => new InvalidRewardDistributorAuthorityError()
)
createErrorFromNameLookup.set(
  'InvalidRewardDistributorAuthority',
  () => new InvalidRewardDistributorAuthorityError()
)

/**
 * InvalidRewardDistributorKind: 'Invalid reward distributor kind'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardDistributorKindError extends Error {
  readonly code: number = 0x17cf
  readonly name: string = 'InvalidRewardDistributorKind'
  constructor() {
    super('Invalid reward distributor kind')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardDistributorKindError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17cf,
  () => new InvalidRewardDistributorKindError()
)
createErrorFromNameLookup.set(
  'InvalidRewardDistributorKind',
  () => new InvalidRewardDistributorKindError()
)

/**
 * SupplyRequired: 'Initial supply required for kind treasury'
 *
 * @category Errors
 * @category generated
 */
export class SupplyRequiredError extends Error {
  readonly code: number = 0x17d0
  readonly name: string = 'SupplyRequired'
  constructor() {
    super('Initial supply required for kind treasury')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SupplyRequiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d0, () => new SupplyRequiredError())
createErrorFromNameLookup.set('SupplyRequired', () => new SupplyRequiredError())

/**
 * InvalidPoolDistributor: 'Invalid distributor for pool'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPoolDistributorError extends Error {
  readonly code: number = 0x17d1
  readonly name: string = 'InvalidPoolDistributor'
  constructor() {
    super('Invalid distributor for pool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPoolDistributorError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d1, () => new InvalidPoolDistributorError())
createErrorFromNameLookup.set(
  'InvalidPoolDistributor',
  () => new InvalidPoolDistributorError()
)

/**
 * DistributorNotClosed: 'Distributor is already open'
 *
 * @category Errors
 * @category generated
 */
export class DistributorNotClosedError extends Error {
  readonly code: number = 0x17d2
  readonly name: string = 'DistributorNotClosed'
  constructor() {
    super('Distributor is already open')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DistributorNotClosedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d2, () => new DistributorNotClosedError())
createErrorFromNameLookup.set(
  'DistributorNotClosed',
  () => new DistributorNotClosedError()
)

/**
 * DistributorAlreadyClosed: 'Distributor is already closed'
 *
 * @category Errors
 * @category generated
 */
export class DistributorAlreadyClosedError extends Error {
  readonly code: number = 0x17d3
  readonly name: string = 'DistributorAlreadyClosed'
  constructor() {
    super('Distributor is already closed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DistributorAlreadyClosedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d3, () => new DistributorAlreadyClosedError())
createErrorFromNameLookup.set(
  'DistributorAlreadyClosed',
  () => new DistributorAlreadyClosedError()
)

/**
 * InvalidRewardEntry: 'Invalid reward entry'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardEntryError extends Error {
  readonly code: number = 0x17d4
  readonly name: string = 'InvalidRewardEntry'
  constructor() {
    super('Invalid reward entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardEntryError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d4, () => new InvalidRewardEntryError())
createErrorFromNameLookup.set(
  'InvalidRewardEntry',
  () => new InvalidRewardEntryError()
)

/**
 * InvalidRewardDistributorTokenAccount: 'Invalid reward distributor token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardDistributorTokenAccountError extends Error {
  readonly code: number = 0x17d5
  readonly name: string = 'InvalidRewardDistributorTokenAccount'
  constructor() {
    super('Invalid reward distributor token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRewardDistributorTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d5,
  () => new InvalidRewardDistributorTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidRewardDistributorTokenAccount',
  () => new InvalidRewardDistributorTokenAccountError()
)

/**
 * InvalidAuthorityTokenAccount: 'Invalid authority token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityTokenAccountError extends Error {
  readonly code: number = 0x17d6
  readonly name: string = 'InvalidAuthorityTokenAccount'
  constructor() {
    super('Invalid authority token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d6,
  () => new InvalidAuthorityTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidAuthorityTokenAccount',
  () => new InvalidAuthorityTokenAccountError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
