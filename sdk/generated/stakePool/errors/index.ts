/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidStakePool: 'Invalid stake pool'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakePoolError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidStakePool'
  constructor() {
    super('Invalid stake pool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakePoolError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidStakePoolError())
createErrorFromNameLookup.set(
  'InvalidStakePool',
  () => new InvalidStakePoolError()
)

/**
 * InvalidStakeEntry: 'Invalid stake entry'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeEntryError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidStakeEntry'
  constructor() {
    super('Invalid stake entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeEntryError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidStakeEntryError())
createErrorFromNameLookup.set(
  'InvalidStakeEntry',
  () => new InvalidStakeEntryError()
)

/**
 * InvalidAuthority: 'Invalid stake pool authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidAuthority'
  constructor() {
    super('Invalid stake pool authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidAuthorityError())
createErrorFromNameLookup.set(
  'InvalidAuthority',
  () => new InvalidAuthorityError()
)

/**
 * InvalidEscrow: 'Mismatched user and escrow'
 *
 * @category Errors
 * @category generated
 */
export class InvalidEscrowError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidEscrow'
  constructor() {
    super('Mismatched user and escrow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidEscrowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidEscrowError())
createErrorFromNameLookup.set('InvalidEscrow', () => new InvalidEscrowError())

/**
 * InvalidUserStakeMintTokenAccount: 'Invalid user original mint token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidUserStakeMintTokenAccountError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidUserStakeMintTokenAccount'
  constructor() {
    super('Invalid user original mint token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidUserStakeMintTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177a,
  () => new InvalidUserStakeMintTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidUserStakeMintTokenAccount',
  () => new InvalidUserStakeMintTokenAccountError()
)

/**
 * InvalidLastStaker: 'Invalid last staker'
 *
 * @category Errors
 * @category generated
 */
export class InvalidLastStakerError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'InvalidLastStaker'
  constructor() {
    super('Invalid last staker')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidLastStakerError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new InvalidLastStakerError())
createErrorFromNameLookup.set(
  'InvalidLastStaker',
  () => new InvalidLastStakerError()
)

/**
 * CannotUpdateUnstakedEntry: 'Cannot update unstaked entry'
 *
 * @category Errors
 * @category generated
 */
export class CannotUpdateUnstakedEntryError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'CannotUpdateUnstakedEntry'
  constructor() {
    super('Cannot update unstaked entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotUpdateUnstakedEntryError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177c,
  () => new CannotUpdateUnstakedEntryError()
)
createErrorFromNameLookup.set(
  'CannotUpdateUnstakedEntry',
  () => new CannotUpdateUnstakedEntryError()
)

/**
 * CannotCloseStakedEntry: 'Cannot close staked entry'
 *
 * @category Errors
 * @category generated
 */
export class CannotCloseStakedEntryError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'CannotCloseStakedEntry'
  constructor() {
    super('Cannot close staked entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotCloseStakedEntryError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new CannotCloseStakedEntryError())
createErrorFromNameLookup.set(
  'CannotCloseStakedEntry',
  () => new CannotCloseStakedEntryError()
)

/**
 * CannotClosePoolWithStakedEntries: 'Cannot close staked entry'
 *
 * @category Errors
 * @category generated
 */
export class CannotClosePoolWithStakedEntriesError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'CannotClosePoolWithStakedEntries'
  constructor() {
    super('Cannot close staked entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotClosePoolWithStakedEntriesError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177e,
  () => new CannotClosePoolWithStakedEntriesError()
)
createErrorFromNameLookup.set(
  'CannotClosePoolWithStakedEntries',
  () => new CannotClosePoolWithStakedEntriesError()
)

/**
 * InvalidMintMetadata: 'Invalid mint metadata'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintMetadataError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'InvalidMintMetadata'
  constructor() {
    super('Invalid mint metadata')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintMetadataError)
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new InvalidMintMetadataError())
createErrorFromNameLookup.set(
  'InvalidMintMetadata',
  () => new InvalidMintMetadataError()
)

/**
 * MintNotAllowedInPool: 'Mint not allowed in this pool'
 *
 * @category Errors
 * @category generated
 */
export class MintNotAllowedInPoolError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'MintNotAllowedInPool'
  constructor() {
    super('Mint not allowed in this pool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintNotAllowedInPoolError)
    }
  }
}

createErrorFromCodeLookup.set(0x1785, () => new MintNotAllowedInPoolError())
createErrorFromNameLookup.set(
  'MintNotAllowedInPool',
  () => new MintNotAllowedInPoolError()
)

/**
 * InvalidStakeAuthorizationRecord: 'Invalid stake authorization provided'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeAuthorizationRecordError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'InvalidStakeAuthorizationRecord'
  constructor() {
    super('Invalid stake authorization provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeAuthorizationRecordError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1786,
  () => new InvalidStakeAuthorizationRecordError()
)
createErrorFromNameLookup.set(
  'InvalidStakeAuthorizationRecord',
  () => new InvalidStakeAuthorizationRecordError()
)

/**
 * InvalidMintMetadataOwner: 'Mint metadata is owned by the incorrect program'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintMetadataOwnerError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'InvalidMintMetadataOwner'
  constructor() {
    super('Mint metadata is owned by the incorrect program')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintMetadataOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1787, () => new InvalidMintMetadataOwnerError())
createErrorFromNameLookup.set(
  'InvalidMintMetadataOwner',
  () => new InvalidMintMetadataOwnerError()
)

/**
 * InvalidPaymentMint: 'Invalid payment mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPaymentMintError extends Error {
  readonly code: number = 0x178e
  readonly name: string = 'InvalidPaymentMint'
  constructor() {
    super('Invalid payment mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPaymentMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x178e, () => new InvalidPaymentMintError())
createErrorFromNameLookup.set(
  'InvalidPaymentMint',
  () => new InvalidPaymentMintError()
)

/**
 * CooldownSecondRemaining: 'Token still has some cooldown seconds remaining'
 *
 * @category Errors
 * @category generated
 */
export class CooldownSecondRemainingError extends Error {
  readonly code: number = 0x1798
  readonly name: string = 'CooldownSecondRemaining'
  constructor() {
    super('Token still has some cooldown seconds remaining')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CooldownSecondRemainingError)
    }
  }
}

createErrorFromCodeLookup.set(0x1798, () => new CooldownSecondRemainingError())
createErrorFromNameLookup.set(
  'CooldownSecondRemaining',
  () => new CooldownSecondRemainingError()
)

/**
 * StakePoolHasEnded: 'Stake pool has ended'
 *
 * @category Errors
 * @category generated
 */
export class StakePoolHasEndedError extends Error {
  readonly code: number = 0x17a2
  readonly name: string = 'StakePoolHasEnded'
  constructor() {
    super('Stake pool has ended')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakePoolHasEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a2, () => new StakePoolHasEndedError())
createErrorFromNameLookup.set(
  'StakePoolHasEnded',
  () => new StakePoolHasEndedError()
)

/**
 * MinStakeSecondsNotSatisfied: 'Minimum stake seconds not satisfied'
 *
 * @category Errors
 * @category generated
 */
export class MinStakeSecondsNotSatisfiedError extends Error {
  readonly code: number = 0x17a3
  readonly name: string = 'MinStakeSecondsNotSatisfied'
  constructor() {
    super('Minimum stake seconds not satisfied')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MinStakeSecondsNotSatisfiedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a3,
  () => new MinStakeSecondsNotSatisfiedError()
)
createErrorFromNameLookup.set(
  'MinStakeSecondsNotSatisfied',
  () => new MinStakeSecondsNotSatisfiedError()
)

/**
 * CannotBoostUnstakedToken: 'Cannot boost unstaked token'
 *
 * @category Errors
 * @category generated
 */
export class CannotBoostUnstakedTokenError extends Error {
  readonly code: number = 0x17ac
  readonly name: string = 'CannotBoostUnstakedToken'
  constructor() {
    super('Cannot boost unstaked token')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotBoostUnstakedTokenError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ac, () => new CannotBoostUnstakedTokenError())
createErrorFromNameLookup.set(
  'CannotBoostUnstakedToken',
  () => new CannotBoostUnstakedTokenError()
)

/**
 * CannotBoostMoreThanCurrentTime: 'Cannot boost past current time less than start time'
 *
 * @category Errors
 * @category generated
 */
export class CannotBoostMoreThanCurrentTimeError extends Error {
  readonly code: number = 0x17ad
  readonly name: string = 'CannotBoostMoreThanCurrentTime'
  constructor() {
    super('Cannot boost past current time less than start time')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotBoostMoreThanCurrentTimeError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ad,
  () => new CannotBoostMoreThanCurrentTimeError()
)
createErrorFromNameLookup.set(
  'CannotBoostMoreThanCurrentTime',
  () => new CannotBoostMoreThanCurrentTimeError()
)

/**
 * InvalidBoostPayerTokenAccount: 'Invalid boost payer token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBoostPayerTokenAccountError extends Error {
  readonly code: number = 0x17ae
  readonly name: string = 'InvalidBoostPayerTokenAccount'
  constructor() {
    super('Invalid boost payer token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidBoostPayerTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ae,
  () => new InvalidBoostPayerTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidBoostPayerTokenAccount',
  () => new InvalidBoostPayerTokenAccountError()
)

/**
 * InvalidBoostPaymentRecipientTokenAccount: 'Invalid boost payment recipient token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidBoostPaymentRecipientTokenAccountError extends Error {
  readonly code: number = 0x17af
  readonly name: string = 'InvalidBoostPaymentRecipientTokenAccount'
  constructor() {
    super('Invalid boost payment recipient token account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        InvalidBoostPaymentRecipientTokenAccountError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17af,
  () => new InvalidBoostPaymentRecipientTokenAccountError()
)
createErrorFromNameLookup.set(
  'InvalidBoostPaymentRecipientTokenAccount',
  () => new InvalidBoostPaymentRecipientTokenAccountError()
)

/**
 * InvalidPaymentManager: 'Invalid payment manager'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPaymentManagerError extends Error {
  readonly code: number = 0x17b0
  readonly name: string = 'InvalidPaymentManager'
  constructor() {
    super('Invalid payment manager')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPaymentManagerError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b0, () => new InvalidPaymentManagerError())
createErrorFromNameLookup.set(
  'InvalidPaymentManager',
  () => new InvalidPaymentManagerError()
)

/**
 * CannotBoostFungibleToken: 'Cannot boost a fungible token stake entry'
 *
 * @category Errors
 * @category generated
 */
export class CannotBoostFungibleTokenError extends Error {
  readonly code: number = 0x17b1
  readonly name: string = 'CannotBoostFungibleToken'
  constructor() {
    super('Cannot boost a fungible token stake entry')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotBoostFungibleTokenError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b1, () => new CannotBoostFungibleTokenError())
createErrorFromNameLookup.set(
  'CannotBoostFungibleToken',
  () => new CannotBoostFungibleTokenError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
