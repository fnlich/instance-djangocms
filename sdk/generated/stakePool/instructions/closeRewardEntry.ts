/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CloseRewardEntry
 * @category generated
 */
export const closeRewardEntryStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CloseRewardEntryInstructionArgs'
)
/**
 * Accounts required by the _closeRewardEntry_ instruction
 *
 * @property [] rewardDistributor
 * @property [_writable_] rewardEntry
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category CloseRewardEntry
 * @category generated
 */
export type CloseRewardEntryInstructionAccounts = {
  rewardDistributor: web3.PublicKey
  rewardEntry: web3.PublicKey
  authority: web3.PublicKey
}

export const closeRewardEntryInstructionDiscriminator = [
  227, 139, 250, 154, 59, 134, 97, 123,
]

/**
 * Creates a _CloseRewardEntry_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CloseRewardEntry
 * @category generated
 */
export function createCloseRewardEntryInstruction(
  accounts: CloseRewardEntryInstructionAccounts,
  programId = new web3.PublicKey('stk2688WVNGaHZGiLuuyGdQQWDdt8n69gEEo5eWYFt6')
) {
  const [data] = closeRewardEntryStruct.serialize({
    instructionDiscriminator: closeRewardEntryInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.rewardDistributor,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rewardEntry,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
