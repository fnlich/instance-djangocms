/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as splToken from "@solana/spl-token";
import * as web3 from "@solana/web3.js";

import type { InitStakeMintIx } from "../types/InitStakeMintIx";
import { initStakeMintIxBeet } from "../types/InitStakeMintIx";

/**
 * @category Instructions
 * @category InitStakeMint
 * @category generated
 */
export type InitStakeMintInstructionArgs = {
  ix: InitStakeMintIx;
};
/**
 * @category Instructions
 * @category InitStakeMint
 * @category generated
 */
export const initStakeMintStruct = new beet.FixableBeetArgsStruct<
  InitStakeMintInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["ix", initStakeMintIxBeet],
  ],
  "InitStakeMintInstructionArgs"
);
/**
 * Accounts required by the _initStakeMint_ instruction
 *
 * @property [_writable_] stakeEntry
 * @property [_writable_] stakePool
 * @property [] originalMint
 * @property [] originalMintMetadata
 * @property [_writable_, **signer**] stakeMint
 * @property [_writable_] stakeMintMetadata
 * @property [_writable_] stakeEntryStakeMintTokenAccount
 * @property [_writable_] mintManager
 * @property [**signer**] payer
 * @property [] tokenManagerProgram
 * @property [] associatedToken
 * @property [] tokenMetadataProgram
 * @category Instructions
 * @category InitStakeMint
 * @category generated
 */
export type InitStakeMintInstructionAccounts = {
  stakeEntry: web3.PublicKey;
  stakePool: web3.PublicKey;
  originalMint: web3.PublicKey;
  originalMintMetadata: web3.PublicKey;
  stakeMint: web3.PublicKey;
  stakeMintMetadata: web3.PublicKey;
  stakeEntryStakeMintTokenAccount: web3.PublicKey;
  mintManager: web3.PublicKey;
  payer: web3.PublicKey;
  rent?: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  tokenManagerProgram: web3.PublicKey;
  associatedToken: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const initStakeMintInstructionDiscriminator = [
  113, 57, 116, 51, 153, 118, 47, 236,
];

/**
 * Creates a _InitStakeMint_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitStakeMint
 * @category generated
 */
export function createInitStakeMintInstruction(
  accounts: InitStakeMintInstructionAccounts,
  args: InitStakeMintInstructionArgs,
  programId = new web3.PublicKey("stk2688WVNGaHZGiLuuyGdQQWDdt8n69gEEo5eWYFt6")
) {
  const [data] = initStakeMintStruct.serialize({
    instructionDiscriminator: initStakeMintInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.stakeEntry,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.originalMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.originalMintMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeMint,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.stakeMintMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeEntryStakeMintTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mintManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenManagerProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
