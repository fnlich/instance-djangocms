/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Stake
 * @category generated
 */
export type StakeInstructionArgs = {
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category Stake
 * @category generated
 */
export const stakeStruct = new beet.BeetArgsStruct<
  StakeInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['amount', beet.u64],
  ],
  'StakeInstructionArgs'
)
/**
 * Accounts required by the _stake_ instruction
 *
 * @property [_writable_] stakeEntry
 * @property [_writable_] stakePool
 * @property [_writable_] stakeEntryStakeMintTokenAccount
 * @property [] stakeMint
 * @property [] stakeMintEdition
 * @property [_writable_, **signer**] user
 * @property [_writable_] userStakeMintTokenAccount
 * @property [] tokenMetadataProgram
 * @category Instructions
 * @category Stake
 * @category generated
 */
export type StakeInstructionAccounts = {
  stakeEntry: web3.PublicKey
  stakePool: web3.PublicKey
  stakeEntryStakeMintTokenAccount: web3.PublicKey
  stakeMint: web3.PublicKey
  stakeMintEdition: web3.PublicKey
  user: web3.PublicKey
  userStakeMintTokenAccount: web3.PublicKey
  tokenMetadataProgram: web3.PublicKey
  tokenProgram?: web3.PublicKey
}

export const stakeInstructionDiscriminator = [
  206, 176, 202, 18, 200, 209, 179, 108,
]

/**
 * Creates a _Stake_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Stake
 * @category generated
 */
export function createStakeInstruction(
  accounts: StakeInstructionAccounts,
  args: StakeInstructionArgs,
  programId = new web3.PublicKey('stk2688WVNGaHZGiLuuyGdQQWDdt8n69gEEo5eWYFt6')
) {
  const [data] = stakeStruct.serialize({
    instructionDiscriminator: stakeInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.stakeEntry,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeEntryStakeMintTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeMintEdition,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.userStakeMintTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
