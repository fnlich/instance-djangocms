/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CloseStakeBooster
 * @category generated
 */
export const closeStakeBoosterStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CloseStakeBoosterInstructionArgs'
)
/**
 * Accounts required by the _closeStakeBooster_ instruction
 *
 * @property [_writable_] stakeBooster
 * @property [_writable_] stakePool
 * @property [_writable_, **signer**] authority
 * @category Instructions
 * @category CloseStakeBooster
 * @category generated
 */
export type CloseStakeBoosterInstructionAccounts = {
  stakeBooster: web3.PublicKey
  stakePool: web3.PublicKey
  authority: web3.PublicKey
}

export const closeStakeBoosterInstructionDiscriminator = [
  12, 141, 144, 159, 75, 219, 34, 169,
]

/**
 * Creates a _CloseStakeBooster_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CloseStakeBooster
 * @category generated
 */
export function createCloseStakeBoosterInstruction(
  accounts: CloseStakeBoosterInstructionAccounts,
  programId = new web3.PublicKey('stk2688WVNGaHZGiLuuyGdQQWDdt8n69gEEo5eWYFt6')
) {
  const [data] = closeStakeBoosterStruct.serialize({
    instructionDiscriminator: closeStakeBoosterInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.stakeBooster,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
