/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  InitReceiptManagerIx,
  initReceiptManagerIxBeet,
} from '../types/InitReceiptManagerIx'

/**
 * @category Instructions
 * @category InitReceiptManager
 * @category generated
 */
export type InitReceiptManagerInstructionArgs = {
  ix: InitReceiptManagerIx
}
/**
 * @category Instructions
 * @category InitReceiptManager
 * @category generated
 */
export const initReceiptManagerStruct = new beet.FixableBeetArgsStruct<
  InitReceiptManagerInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['ix', initReceiptManagerIxBeet],
  ],
  'InitReceiptManagerInstructionArgs'
)
/**
 * Accounts required by the _initReceiptManager_ instruction
 *
 * @property [_writable_] receiptManager
 * @property [] stakePool
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category InitReceiptManager
 * @category generated
 */
export type InitReceiptManagerInstructionAccounts = {
  receiptManager: web3.PublicKey
  stakePool: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const initReceiptManagerInstructionDiscriminator = [
  119, 43, 115, 26, 239, 21, 10, 245,
]

/**
 * Creates a _InitReceiptManager_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitReceiptManager
 * @category generated
 */
export function createInitReceiptManagerInstruction(
  accounts: InitReceiptManagerInstructionAccounts,
  args: InitReceiptManagerInstructionArgs,
  programId = new web3.PublicKey('stk2688WVNGaHZGiLuuyGdQQWDdt8n69gEEo5eWYFt6')
) {
  const [data] = initReceiptManagerStruct.serialize({
    instructionDiscriminator: initReceiptManagerInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.receiptManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
