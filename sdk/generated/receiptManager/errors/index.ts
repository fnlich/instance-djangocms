/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number };
type MaybeErrorWithCode = ErrorWithCode | null | undefined;

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map();
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map();

/**
 * InvalidAuthority: 'Invalid authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x1770;
  readonly name: string = "InvalidAuthority";
  constructor() {
    super("Invalid authority");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidAuthorityError);
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidAuthorityError());
createErrorFromNameLookup.set(
  "InvalidAuthority",
  () => new InvalidAuthorityError()
);

/**
 * MaxNumberOfReceiptsExceeded: 'Max number of receipts exceeded'
 *
 * @category Errors
 * @category generated
 */
export class MaxNumberOfReceiptsExceededError extends Error {
  readonly code: number = 0x1771;
  readonly name: string = "MaxNumberOfReceiptsExceeded";
  constructor() {
    super("Max number of receipts exceeded");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, MaxNumberOfReceiptsExceededError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x1771,
  () => new MaxNumberOfReceiptsExceededError()
);
createErrorFromNameLookup.set(
  "MaxNumberOfReceiptsExceeded",
  () => new MaxNumberOfReceiptsExceededError()
);

/**
 * InvalidClaimer: 'Invalid claimer'
 *
 * @category Errors
 * @category generated
 */
export class InvalidClaimerError extends Error {
  readonly code: number = 0x1772;
  readonly name: string = "InvalidClaimer";
  constructor() {
    super("Invalid claimer");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidClaimerError);
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidClaimerError());
createErrorFromNameLookup.set(
  "InvalidClaimer",
  () => new InvalidClaimerError()
);

/**
 * RewardSecondsNotSatisfied: 'Reward seconds not satisifed'
 *
 * @category Errors
 * @category generated
 */
export class RewardSecondsNotSatisfiedError extends Error {
  readonly code: number = 0x1773;
  readonly name: string = "RewardSecondsNotSatisfied";
  constructor() {
    super("Reward seconds not satisifed");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, RewardSecondsNotSatisfiedError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x1773,
  () => new RewardSecondsNotSatisfiedError()
);
createErrorFromNameLookup.set(
  "RewardSecondsNotSatisfied",
  () => new RewardSecondsNotSatisfiedError()
);

/**
 * InvalidPayerTokenAcount: 'Invalid payer token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPayerTokenAcountError extends Error {
  readonly code: number = 0x1774;
  readonly name: string = "InvalidPayerTokenAcount";
  constructor() {
    super("Invalid payer token account");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidPayerTokenAcountError);
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidPayerTokenAcountError());
createErrorFromNameLookup.set(
  "InvalidPayerTokenAcount",
  () => new InvalidPayerTokenAcountError()
);

/**
 * InvalidPaymentMint: 'Invalid payment mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPaymentMintError extends Error {
  readonly code: number = 0x1775;
  readonly name: string = "InvalidPaymentMint";
  constructor() {
    super("Invalid payment mint");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidPaymentMintError);
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidPaymentMintError());
createErrorFromNameLookup.set(
  "InvalidPaymentMint",
  () => new InvalidPaymentMintError()
);

/**
 * InvalidPaymentManager: 'Invalid payment manager'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPaymentManagerError extends Error {
  readonly code: number = 0x1776;
  readonly name: string = "InvalidPaymentManager";
  constructor() {
    super("Invalid payment manager");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidPaymentManagerError);
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidPaymentManagerError());
createErrorFromNameLookup.set(
  "InvalidPaymentManager",
  () => new InvalidPaymentManagerError()
);

/**
 * InvalidMaxClaimedReceipts: 'Invalid max claimed receipts'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMaxClaimedReceiptsError extends Error {
  readonly code: number = 0x1777;
  readonly name: string = "InvalidMaxClaimedReceipts";
  constructor() {
    super("Invalid max claimed receipts");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidMaxClaimedReceiptsError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x1777,
  () => new InvalidMaxClaimedReceiptsError()
);
createErrorFromNameLookup.set(
  "InvalidMaxClaimedReceipts",
  () => new InvalidMaxClaimedReceiptsError()
);

/**
 * InvalidPaymentTokenAccount: 'Invalid payment token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPaymentTokenAccountError extends Error {
  readonly code: number = 0x1778;
  readonly name: string = "InvalidPaymentTokenAccount";
  constructor() {
    super("Invalid payment token account");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidPaymentTokenAccountError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x1778,
  () => new InvalidPaymentTokenAccountError()
);
createErrorFromNameLookup.set(
  "InvalidPaymentTokenAccount",
  () => new InvalidPaymentTokenAccountError()
);

/**
 * InvalidPaymentCollector: 'Invalid payment collector'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPaymentCollectorError extends Error {
  readonly code: number = 0x1779;
  readonly name: string = "InvalidPaymentCollector";
  constructor() {
    super("Invalid payment collector");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidPaymentCollectorError);
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new InvalidPaymentCollectorError());
createErrorFromNameLookup.set(
  "InvalidPaymentCollector",
  () => new InvalidPaymentCollectorError()
);

/**
 * InvalidRewardReceipt: 'Invalid reward receipt'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRewardReceiptError extends Error {
  readonly code: number = 0x177a;
  readonly name: string = "InvalidRewardReceipt";
  constructor() {
    super("Invalid reward receipt");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidRewardReceiptError);
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidRewardReceiptError());
createErrorFromNameLookup.set(
  "InvalidRewardReceipt",
  () => new InvalidRewardReceiptError()
);

/**
 * InvalidReceiptEntry: 'Invalid receipt entry'
 *
 * @category Errors
 * @category generated
 */
export class InvalidReceiptEntryError extends Error {
  readonly code: number = 0x177b;
  readonly name: string = "InvalidReceiptEntry";
  constructor() {
    super("Invalid receipt entry");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidReceiptEntryError);
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new InvalidReceiptEntryError());
createErrorFromNameLookup.set(
  "InvalidReceiptEntry",
  () => new InvalidReceiptEntryError()
);

/**
 * InsufficientAvailableStakeSeconds: 'Insufficient available stake seconds to use'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientAvailableStakeSecondsError extends Error {
  readonly code: number = 0x177c;
  readonly name: string = "InsufficientAvailableStakeSeconds";
  constructor() {
    super("Insufficient available stake seconds to use");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InsufficientAvailableStakeSecondsError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x177c,
  () => new InsufficientAvailableStakeSecondsError()
);
createErrorFromNameLookup.set(
  "InsufficientAvailableStakeSeconds",
  () => new InsufficientAvailableStakeSecondsError()
);

/**
 * InvalidStakeEntry: 'Invalid stake entry'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeEntryError extends Error {
  readonly code: number = 0x177d;
  readonly name: string = "InvalidStakeEntry";
  constructor() {
    super("Invalid stake entry");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidStakeEntryError);
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new InvalidStakeEntryError());
createErrorFromNameLookup.set(
  "InvalidStakeEntry",
  () => new InvalidStakeEntryError()
);

/**
 * InvalidReceiptManager: 'Invalid receipt manager'
 *
 * @category Errors
 * @category generated
 */
export class InvalidReceiptManagerError extends Error {
  readonly code: number = 0x177e;
  readonly name: string = "InvalidReceiptManager";
  constructor() {
    super("Invalid receipt manager");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidReceiptManagerError);
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new InvalidReceiptManagerError());
createErrorFromNameLookup.set(
  "InvalidReceiptManager",
  () => new InvalidReceiptManagerError()
);

/**
 * RewardReceiptIsNotAllowed: 'Reward receipt is not allowed'
 *
 * @category Errors
 * @category generated
 */
export class RewardReceiptIsNotAllowedError extends Error {
  readonly code: number = 0x177f;
  readonly name: string = "RewardReceiptIsNotAllowed";
  constructor() {
    super("Reward receipt is not allowed");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, RewardReceiptIsNotAllowedError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x177f,
  () => new RewardReceiptIsNotAllowedError()
);
createErrorFromNameLookup.set(
  "RewardReceiptIsNotAllowed",
  () => new RewardReceiptIsNotAllowedError()
);

/**
 * RewardReceiptAlreadyClaimed: 'Reward receipt already claimed'
 *
 * @category Errors
 * @category generated
 */
export class RewardReceiptAlreadyClaimedError extends Error {
  readonly code: number = 0x1780;
  readonly name: string = "RewardReceiptAlreadyClaimed";
  constructor() {
    super("Reward receipt already claimed");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, RewardReceiptAlreadyClaimedError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x1780,
  () => new RewardReceiptAlreadyClaimedError()
);
createErrorFromNameLookup.set(
  "RewardReceiptAlreadyClaimed",
  () => new RewardReceiptAlreadyClaimedError()
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code);
  return createError != null ? createError() : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name);
  return createError != null ? createError() : null;
}
