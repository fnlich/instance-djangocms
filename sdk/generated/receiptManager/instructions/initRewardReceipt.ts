/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category InitRewardReceipt
 * @category generated
 */
export const initRewardReceiptStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)]],
  "InitRewardReceiptInstructionArgs"
);
/**
 * Accounts required by the _initRewardReceipt_ instruction
 *
 * @property [_writable_] rewardReceipt
 * @property [] receiptManager
 * @property [] receiptEntry
 * @property [] stakeEntry
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category InitRewardReceipt
 * @category generated
 */
export type InitRewardReceiptInstructionAccounts = {
  rewardReceipt: web3.PublicKey;
  receiptManager: web3.PublicKey;
  receiptEntry: web3.PublicKey;
  stakeEntry: web3.PublicKey;
  payer: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const initRewardReceiptInstructionDiscriminator = [
  107, 148, 66, 165, 24, 246, 30, 120,
];

/**
 * Creates a _InitRewardReceipt_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitRewardReceipt
 * @category generated
 */
export function createInitRewardReceiptInstruction(
  accounts: InitRewardReceiptInstructionAccounts,
  programId = new web3.PublicKey("rrm26Uq1x1Rx8TwZaReKqUEu5fnNKufyANpgbon5otp")
) {
  const [data] = initRewardReceiptStruct.serialize({
    instructionDiscriminator: initRewardReceiptInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.rewardReceipt,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.receiptManager,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.receiptEntry,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeEntry,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
