/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ClaimRewardReceipt
 * @category generated
 */
export const claimRewardReceiptStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ClaimRewardReceiptInstructionArgs'
)
/**
 * Accounts required by the _claimRewardReceipt_ instruction
 *
 * @property [_writable_] rewardReceipt
 * @property [_writable_] receiptManager
 * @property [] stakeEntry
 * @property [_writable_] receiptEntry
 * @property [_writable_] paymentManager
 * @property [_writable_] feeCollectorTokenAccount
 * @property [_writable_] paymentRecipientTokenAccount
 * @property [_writable_] payerTokenAccount
 * @property [_writable_, **signer**] payer
 * @property [_writable_, **signer**] claimer
 * @property [] cardinalPaymentManager
 * @category Instructions
 * @category ClaimRewardReceipt
 * @category generated
 */
export type ClaimRewardReceiptInstructionAccounts = {
  rewardReceipt: web3.PublicKey
  receiptManager: web3.PublicKey
  stakeEntry: web3.PublicKey
  receiptEntry: web3.PublicKey
  paymentManager: web3.PublicKey
  feeCollectorTokenAccount: web3.PublicKey
  paymentRecipientTokenAccount: web3.PublicKey
  payerTokenAccount: web3.PublicKey
  payer: web3.PublicKey
  claimer: web3.PublicKey
  cardinalPaymentManager: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const claimRewardReceiptInstructionDiscriminator = [
  19, 193, 200, 24, 22, 76, 23, 220,
]

/**
 * Creates a _ClaimRewardReceipt_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ClaimRewardReceipt
 * @category generated
 */
export function createClaimRewardReceiptInstruction(
  accounts: ClaimRewardReceiptInstructionAccounts,
  programId = new web3.PublicKey('rrm26Uq1x1Rx8TwZaReKqUEu5fnNKufyANpgbon5otp')
) {
  const [data] = claimRewardReceiptStruct.serialize({
    instructionDiscriminator: claimRewardReceiptInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.rewardReceipt,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.receiptManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeEntry,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.receiptEntry,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.paymentManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.feeCollectorTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.paymentRecipientTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payerTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.claimer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.cardinalPaymentManager,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
